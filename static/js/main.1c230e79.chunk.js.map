{"version":3,"sources":["lib/LinkedListNode.js","Board/Snake.js","lib/LinkedList.js","Board/Board.jsx","lib/utils.js","Menu/Item.jsx","Menu/Menu.jsx","App.jsx","index.js"],"names":["LinkedListNode","value","this","next","Snake","getHead","tail","getTail","head","addHead","addLast","removeTail","removeFirst","addFirst","node","curHead","curTail","removeLast","Direction","getSnakeStartValue","board","rowSize","length","colSize","startRow","Math","round","startCol","row","col","cell","createBoard","boardSize","counter","currentRow","push","getDirectionFromKey","key","getOppositeDirection","direction","getNextCoords","coords","hasBoundary","newCoords","getCellClassName","cellValue","foodCell","snakeCells","has","Board","props","useState","snake","setSnake","Set","setSnakeCells","setDirection","setFoodCell","score","setScore","stop","setStop","speed","max","useEffect","handleKeydown","e","viewHandler","newDirection","size","window","addEventListener","removeEventListener","topScore","topScoreHandler","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","curHeadCoords","nextHeadCoords","nextHeadCell","handleGameOver","newSnakeCells","add","delete","handleFoodConsumption","maxCellValue","nextFoodCell","floor","random","s","newSnake","className","map","rowIdx","cellIdx","Item","isSelected","text","Menu","menuItems","action","alert","selected","setSelected","item","idx","View","App","view","setView","setTopScore","handleView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1c230e79.chunk.js","sourcesContent":["class LinkedListNode {\n    constructor(value) {\n        this.value = value;\n        this.next = null;\n    }\n}\n\nexport default LinkedListNode;","import LinkedList from \"../lib/LinkedList\";\n\nclass Snake extends LinkedList {\n    getHead = () => this.tail;\n\n    getTail = () => this.head;\n\n    addHead = (value) => this.addLast(value);\n\n    removeTail = () => this.removeFirst();\n}\n\nexport default Snake;","import LinkedListNode from './LinkedListNode'\n\nclass LinkedList {\n    constructor(value) {\n        const node = new LinkedListNode(value);\n        this.head = node;\n        this.tail = node;\n    }\n\n    addFirst = (value) => {\n        const node = new LinkedListNode(value);\n        const curHead = this.head;\n        this.head = node;\n        node.next = curHead;\n        if (this.tail === null) {\n            this.tail = node;\n        }\n    };\n\n    addLast = (value) => {\n        if (this.head === null) {\n            this.addFirst(value);\n        } else {\n            const node = new LinkedListNode(value);\n            const curTail = this.tail;\n            this.tail = node;\n            curTail.next = node;\n        }\n    };\n\n    removeFirst = () => {\n        if (this.head !== null) {\n            this.head = this.head.next;\n            if (this.head === null) {\n                this.tail = null;\n            }\n        }\n    }\n\n    removeLast = () => {\n        if (this.head !== null) {\n            let node = this.head;\n            if (node.next == null) {\n                this.head = null;\n                this.tail = null;\n            }\n            else {\n                while (node.next !== null && node.next.next !== null) {\n                    node = node.next;\n                }\n                node.next = null;\n                this.tail = node;\n            }\n        }\n    };\n}\n\nexport default LinkedList;","import React, { useState, useEffect } from 'react';\nimport {\n    useInterval,\n} from '../lib/utils.js';\n\nimport './Board.css';\nimport Snake from './Snake';\n\nconst SNAKE_MIN_SPEED = 1000;\nconst INITIAL_FOOD_DISTANCE = 5\n\nconst Direction = {\n    UP: 'UP',\n    RIGHT: 'RIGHT',\n    DOWN: 'DOWN',\n    LEFT: 'LEFT',\n};\n\n\nconst getSnakeStartValue = board => {\n    const rowSize = board.length;\n    const colSize = board[0].length;\n    const startRow = Math.round(rowSize / 3);\n    const startCol = Math.round(colSize / 3);\n    const startCell = board[startRow][startCol];\n    return {\n        row: startRow,\n        col: startCol,\n        cell: startCell,\n    };\n};\n\nconst Board = (props) => {\n    const board = createBoard(props.boardSize);\n    const [snake, setSnake] = useState(new Snake(getSnakeStartValue(board)));\n    const [snakeCells, setSnakeCells] = useState(new Set([snake.getHead().value.cell]));\n    const [direction, setDirection] = useState(Direction.RIGHT);\n    const [foodCell, setFoodCell] = useState(snake.getHead().value.cell + INITIAL_FOOD_DISTANCE);\n    const [score, setScore] = useState(0);\n    const [stop, setStop] = useState(false);\n    const speed = Math.max(SNAKE_MIN_SPEED - (props.speed - 1) * 50, 10);\n    const hasBoundary = false;\n\n    // Handle keydown event.\n    useEffect(() => {\n        const handleKeydown = e => {\n            // Press Enter to pause or resume.\n            if (e.key === 'Enter') {\n                setStop(!stop);\n            } else if (e.key === 'Escape') {\n                props.viewHandler();\n            } else if (!stop) {\n                const newDirection = getDirectionFromKey(e.key);\n                // Ignore the cases\n                // 1. input key not arrow directions,\n                // 2. or new direction is the opposite of the original one \n                // when the snake's size is more than one.\n                if (newDirection === null ||\n                    (getOppositeDirection(newDirection) === direction && snakeCells.size > 1))\n                    return;\n                setDirection(newDirection);\n            }\n        };\n\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [stop, direction, snakeCells.size, props]);\n\n    // Handle scores\n    useEffect(() => {\n        if (score > props.topScore) props.topScoreHandler(score);\n    }, [score, props]);\n\n    // Handle snake's move.\n    useInterval(() => {\n        moveSnake();\n    }, !stop ? speed : null);\n\n    const moveSnake = () => {\n        const curHeadCoords = {\n            row: snake.getHead().value.row,\n            col: snake.getHead().value.col\n        };\n\n        const nextHeadCoords = getNextCoords(curHeadCoords, direction, board, hasBoundary);\n        const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n\n        if ((hasBoundary && isOutOfBounds(nextHeadCoords, board)) || snakeCells.has(nextHeadCell)) {\n            handleGameOver();\n            return;\n        }\n\n        snake.addHead({\n            row: nextHeadCoords.row,\n            col: nextHeadCoords.col,\n            cell: nextHeadCell\n        });\n\n        const newSnakeCells = new Set(snakeCells);\n        newSnakeCells.add(nextHeadCell);\n\n        if (nextHeadCell !== foodCell) {\n            newSnakeCells.delete(snake.getTail().value.cell);\n            snake.removeTail();\n        } else {\n            handleFoodConsumption(newSnakeCells);\n        }\n\n        setSnake(snake);\n        setSnakeCells(newSnakeCells);\n    }\n\n    const handleFoodConsumption = newSnakeCells => {\n        const maxCellValue = props.boardSize ** 2;\n        let nextFoodCell = null;\n        while (nextFoodCell === null || newSnakeCells.has(nextFoodCell)) {\n            nextFoodCell = Math.floor(Math.random() * maxCellValue + 1);\n        }\n        setFoodCell(nextFoodCell);\n        setScore(s => s + 1);\n    }\n\n    const handleGameOver = () => {\n        const newSnake = getSnakeStartValue(board);\n        setSnake(new Snake(newSnake));\n        setSnakeCells(new Set([newSnake.cell]));\n        setDirection(Direction.RIGHT);\n        setFoodCell(newSnake.cell + INITIAL_FOOD_DISTANCE)\n        setScore(0);\n    }\n\n    return (\n        <div className=\"board\">{\n            board.map((row, rowIdx) => (\n                <div key={rowIdx} className=\"row\">{\n                    row.map((cellValue, cellIdx) => (\n                        <div\n                            key={cellIdx}\n                            className={getCellClassName(cellValue, foodCell, snakeCells)}>\n                        </div>\n                    ))\n                }</div>\n            ))\n        }\n            <div className=\"score-row\">\n                <div className=\"score-cell\">\n                    <span>Score: {score}</span>\n                </div>\n                <div className=\"score-cell\">\n                    <span>Top Score: {props.topScore}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst createBoard = boardSize => {\n    let counter = 1;\n    const board = [];\n    for (let row = 0; row < boardSize; row++) {\n        const currentRow = [];\n        for (let col = 0; col < boardSize; col++) {\n            currentRow.push(counter++);\n        }\n        board.push(currentRow);\n    }\n    return board\n}\n\nconst getDirectionFromKey = key =>\n    key === 'ArrowUp' ? Direction.UP :\n        key === 'ArrowRight' ? Direction.RIGHT :\n            key === 'ArrowDown' ? Direction.DOWN :\n                key === 'ArrowLeft' ? Direction.LEFT : null;\n\nconst getOppositeDirection = direction =>\n    direction === Direction.UP ? Direction.DOWN :\n        direction === Direction.RIGHT ? Direction.LEFT :\n            direction === Direction.DOWN ? Direction.UP :\n                direction === Direction.LEFT ? Direction.RIGHT : null;\n\nconst getNextCoords = (coords, direction, board, hasBoundary) => {\n    const newCoords = direction === Direction.UP ? {\n        row: coords.row - 1,\n        col: coords.col\n    } : direction === Direction.RIGHT ? {\n        row: coords.row,\n        col: coords.col + 1\n    } : direction === Direction.DOWN ? {\n        row: coords.row + 1,\n        col: coords.col\n    } : direction === Direction.LEFT ? {\n        row: coords.row,\n        col: coords.col - 1\n    } : {\n        row: coords.row,\n        col: coords.col\n    };\n    return hasBoundary ? newCoords : {\n        row: newCoords.row < 0 ? board.length - 1 : newCoords.row >= board.length ? 0 : newCoords.row,\n        col: newCoords.col < 0 ? board[0].length - 1 : newCoords.col >= board[0].length ? 0 : newCoords.col\n    };\n};\n\nconst isOutOfBounds = (coords, board) => {\n    const { row, col } = coords;\n    return row < 0 || col < 0 || row >= board.length || col >= board[0].length\n};\n\nconst getCellClassName = (cellValue, foodCell, snakeCells) =>\n    snakeCells.has(cellValue) ? 'cell snake-cell' : cellValue === foodCell ? 'cell food-cell' : 'cell';\n\nexport default Board;","import { useEffect, useRef } from 'react';\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React, { useState, useEffect } from 'react';\n\nimport './Item.css';\n\nconst Item = (props) => {\n    return (\n        <div className={`item ${props.isSelected ? 'selected-item' : ''}`}>\n            <span>{props.text}</span>\n        </div>\n    );\n};\n\nexport default Item;","import React, { useState, useEffect } from 'react';\nimport Item from './Item';\n\nimport './Menu.css';\n\nconst Menu = (props) => {\n    const menuItems = [{\n        text: 'Start',\n        action: props.viewHandler\n    }, {\n        text: 'Settings',\n        action: () => { alert('No Settings right now.') }\n    }, {\n        text: 'Help',\n        action: () => { alert('No Help right now.') }\n    }];\n\n    const [selected, setSelected] = useState(0);\n\n    useEffect(() => {\n        const handleKeydown = e => {\n            if (e.key === 'Enter') {\n                menuItems[selected].action();\n            } else {\n                if (e.key === 'ArrowUp') {\n                    if (selected === 0) return;\n                    setSelected(s => s - 1);\n                } else if (e.key === 'ArrowDown') {\n                    if (selected === menuItems.length - 1) return;\n                    setSelected(selected + 1);\n                }\n            }\n        };\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    });\n\n    return (\n        <div className='menu'>{\n            menuItems.map((item, idx) => (\n                <Item key={idx}\n                    text={item.text}\n                    isSelected={idx === selected}>\n                </Item>))\n        }\n        </div>\n    );\n};\n\nexport default Menu;","import React, { useState, useEffect } from 'react';\nimport Board from './Board/Board';\nimport Menu from './Menu/Menu';\nimport './App.css';\n\nconst View = {\n  InGame: 'INGAME',\n  Home: 'HOME'\n};\n\nconst App = () => {\n  const [view, setView] = useState(View.Home);\n  const [speed, setSpeed] = useState(19);\n  const [boardSize, setBoardSize] = useState(15);\n  const [topScore, setTopScore] = useState(0);\n\n  const handleView = () => {\n    if (view === View.InGame) {\n      setView(View.Home);\n    } else {\n      setView(View.InGame);\n    }\n  };\n\n  const handleTopScore = (s) => { setTopScore(s); };\n\n  return (\n    <div className=\"App\">{\n      view === View.Home ?\n        <Menu viewHandler={handleView}></Menu> :\n        <Board\n          speed={speed}\n          boardSize={boardSize}\n          topScore={topScore}\n          topScoreHandler={handleTopScore}\n          viewHandler={handleView}>\n        </Board>\n    }\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}