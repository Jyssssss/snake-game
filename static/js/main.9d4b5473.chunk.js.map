{"version":3,"sources":["lib/LinkedListNode.js","Board/Snake.js","lib/LinkedList.js","Modal/Modal.jsx","Board/Board.jsx","lib/utils.js","Menu/Item.jsx","Menu/Menu.jsx","App.jsx","index.js"],"names":["LinkedListNode","value","this","next","Snake","getHead","tail","getTail","head","addHead","addLast","removeTail","removeFirst","addFirst","node","curHead","curTail","removeLast","Modal","props","isOpen","className","children","Direction","getSnakeStartValue","board","rowSize","length","colSize","startRow","Math","round","startCol","row","col","cell","createBoard","boardSize","counter","currentRow","push","getDirectionFromKey","key","getOppositeDirection","direction","getNextCoords","coords","hasBoundary","newCoords","isOutOfBounds","getCellClassName","cellValue","foodCell","snakeCells","has","Board","useState","snake","setSnake","Set","setSnakeCells","setDirection","setFoodCell","score","setScore","stop","setStop","max","speed","hasWall","isPauseOpen","setIsPauseOpen","isEnd","setIsEnd","handleRestart","useCallback","newSnake","useEffect","handleKeydown","e","viewHandler","newDirection","size","window","addEventListener","removeEventListener","topScore","topScoreHandler","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","curHeadCoords","nextHeadCoords","handleGameOver","nextHeadCell","newSnakeCells","add","delete","handleFoodConsumption","maxCellValue","nextFoodCell","floor","random","s","map","rowIdx","cellIdx","Item","curIdx","isSelected","values","action","undefined","text","MenuType","Menu","getMainItems","setMenuType","setSelected","setIsHelpOpen","getSettingItems","settingItems","selected","isHelpOpen","menuType","mainItems","setMainItems","items","item","idx","currentSettingIdxs","View","Map","Setting","App","view","setView","mapIdx","setMapIdx","speedIdx","setSpeedIdx","boardSizeIdx","setBoardSizeIdx","settingIdxs","setSettingIdx","setTopScore","i","mapSetting","Array","keys","n","speedSetting","boardSizeSetting","handleView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d4b5473.chunk.js","sourcesContent":["class LinkedListNode {\n    constructor(value) {\n        this.value = value;\n        this.next = null;\n    }\n}\n\nexport default LinkedListNode;","import LinkedList from \"../lib/LinkedList\";\n\nclass Snake extends LinkedList {\n    getHead = () => this.tail;\n\n    getTail = () => this.head;\n\n    addHead = (value) => this.addLast(value);\n\n    removeTail = () => this.removeFirst();\n}\n\nexport default Snake;","import LinkedListNode from './LinkedListNode'\n\nclass LinkedList {\n    constructor(value) {\n        const node = new LinkedListNode(value);\n        this.head = node;\n        this.tail = node;\n    }\n\n    addFirst = (value) => {\n        const node = new LinkedListNode(value);\n        const curHead = this.head;\n        this.head = node;\n        node.next = curHead;\n        if (this.tail === null) {\n            this.tail = node;\n        }\n    };\n\n    addLast = (value) => {\n        if (this.head === null) {\n            this.addFirst(value);\n        } else {\n            const node = new LinkedListNode(value);\n            const curTail = this.tail;\n            this.tail = node;\n            curTail.next = node;\n        }\n    };\n\n    removeFirst = () => {\n        if (this.head !== null) {\n            this.head = this.head.next;\n            if (this.head === null) {\n                this.tail = null;\n            }\n        }\n    }\n\n    removeLast = () => {\n        if (this.head !== null) {\n            let node = this.head;\n            if (node.next == null) {\n                this.head = null;\n                this.tail = null;\n            }\n            else {\n                while (node.next !== null && node.next.next !== null) {\n                    node = node.next;\n                }\n                node.next = null;\n                this.tail = node;\n            }\n        }\n    };\n}\n\nexport default LinkedList;","import React from 'react';\n\nimport './Modal.css';\n\nconst Modal = (props) => {\n\n    return (\n        props.isOpen &&\n        <div className='modal'>\n            <div className='modal-content'>\n                {props.children}\n            </div>\n        </div>\n    );\n};\n\nexport default Modal;","import React, { useState, useEffect, useCallback } from 'react';\nimport {\n    useInterval,\n} from '../lib/utils.js';\n\nimport './Board.css';\nimport Snake from './Snake';\nimport Modal from '../Modal/Modal';\n\nconst SNAKE_MIN_SPEED = 1000;\nconst INITIAL_FOOD_DISTANCE = 5\n\nconst Direction = {\n    UP: 'UP',\n    RIGHT: 'RIGHT',\n    DOWN: 'DOWN',\n    LEFT: 'LEFT',\n};\n\n\nconst getSnakeStartValue = board => {\n    const rowSize = board.length;\n    const colSize = board[0].length;\n    const startRow = Math.round(rowSize / 3);\n    const startCol = Math.round(colSize / 3);\n    const startCell = board[startRow][startCol];\n    return {\n        row: startRow,\n        col: startCol,\n        cell: startCell,\n    };\n};\n\nconst Board = (props) => {\n    const board = createBoard(props.boardSize);\n    const [snake, setSnake] = useState(new Snake(getSnakeStartValue(board)));\n    const [snakeCells, setSnakeCells] = useState(new Set([snake.getHead().value.cell]));\n    const [direction, setDirection] = useState(Direction.RIGHT);\n    const [foodCell, setFoodCell] = useState(snake.getHead().value.cell + INITIAL_FOOD_DISTANCE);\n    const [score, setScore] = useState(0);\n    const [stop, setStop] = useState(false);\n    const [speed,] = useState(Math.max(SNAKE_MIN_SPEED - (props.speed - 1) * 50, 10));\n    const [hasBoundary,] = useState(props.hasWall);\n    const [isPauseOpen, setIsPauseOpen] = useState(false);\n    const [isEnd, setIsEnd] = useState(false);\n\n    const handleRestart = useCallback(() => {\n        const newSnake = getSnakeStartValue(board);\n        setSnake(new Snake(newSnake));\n        setSnakeCells(new Set([newSnake.cell]));\n        setDirection(Direction.RIGHT);\n        setFoodCell(newSnake.cell + INITIAL_FOOD_DISTANCE)\n        setScore(0);\n    }, [board]);\n\n    // Handle keydown event.\n    useEffect(() => {\n        const handleKeydown = e => {\n            // Press Enter to pause or resume.\n            if (e.key === 'Enter') {\n                setStop(!stop);\n                if (isEnd) handleRestart();\n                setIsPauseOpen(!isPauseOpen);\n            } else if (e.key === 'Escape') {\n                props.viewHandler();\n            } else if (!stop) {\n                const newDirection = getDirectionFromKey(e.key);\n                // Ignore the cases\n                // 1. input key not arrow directions,\n                // 2. or new direction is the opposite of the original one \n                // when the snake's size is more than one.\n                if (newDirection === null ||\n                    (getOppositeDirection(newDirection) === direction && snakeCells.size > 1))\n                    return;\n                setDirection(newDirection);\n            }\n        };\n\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [stop, direction, snakeCells.size, isPauseOpen, isEnd, handleRestart, props]);\n\n    // Handle scores\n    useEffect(() => {\n        if (score > props.topScore) props.topScoreHandler(score);\n    }, [score, props]);\n\n    // Handle snake's move.\n    useInterval(() => {\n        moveSnake();\n    }, !stop ? speed : null);\n\n    const moveSnake = () => {\n        const curHeadCoords = {\n            row: snake.getHead().value.row,\n            col: snake.getHead().value.col\n        };\n\n        const nextHeadCoords = getNextCoords(curHeadCoords, direction, board, hasBoundary);\n\n        if ((hasBoundary && isOutOfBounds(nextHeadCoords, board)) ||\n            snakeCells.has(board[nextHeadCoords.row][nextHeadCoords.col])) {\n            handleGameOver();\n            return;\n        }\n        const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n\n        snake.addHead({\n            row: nextHeadCoords.row,\n            col: nextHeadCoords.col,\n            cell: nextHeadCell\n        });\n\n        const newSnakeCells = new Set(snakeCells);\n        newSnakeCells.add(nextHeadCell);\n\n        if (nextHeadCell !== foodCell) {\n            newSnakeCells.delete(snake.getTail().value.cell);\n            snake.removeTail();\n        } else {\n            handleFoodConsumption(newSnakeCells);\n        }\n\n        setSnake(snake);\n        setSnakeCells(newSnakeCells);\n    };\n\n    const handleFoodConsumption = newSnakeCells => {\n        const maxCellValue = props.boardSize ** 2;\n        let nextFoodCell = null;\n        while (nextFoodCell === null || newSnakeCells.has(nextFoodCell)) {\n            nextFoodCell = Math.floor(Math.random() * maxCellValue + 1);\n        }\n        setFoodCell(nextFoodCell);\n        setScore(s => s + 1);\n    };\n\n    const handleGameOver = () => {\n        setStop(true);\n        setIsEnd(true);\n        setIsPauseOpen(true);\n    }\n\n    return (\n        <>\n            <div className=\"board\">{\n                board.map((row, rowIdx) => (\n                    <div key={rowIdx} className=\"row\">{\n                        row.map((cellValue, cellIdx) => (\n                            <div\n                                key={cellIdx}\n                                className={getCellClassName(cellValue, foodCell, snakeCells)}>\n                            </div>\n                        ))\n                    }</div>\n                ))\n            }\n                <div className=\"score-row\">\n                    <div className=\"score-cell\">\n                        <span>Score: {score}</span>\n                    </div>\n                    <div className=\"score-cell\">\n                        <span>Top Score: {props.topScore}</span>\n                    </div>\n                </div>\n            </div>\n            <Modal isOpen={isPauseOpen}>\n                <div>\n                    <br></br>\n                    {isEnd && <h3>Your score: {score}</h3>}\n                    <h3>Press ENTER to resume.</h3>\n                    <h3>Press ESC to End.</h3>\n                    <br></br>\n                </div>\n            </Modal>\n        </>\n    );\n};\n\nconst createBoard = boardSize => {\n    let counter = 1;\n    const board = [];\n    for (let row = 0; row < boardSize; row++) {\n        const currentRow = [];\n        for (let col = 0; col < boardSize; col++) {\n            currentRow.push(counter++);\n        }\n        board.push(currentRow);\n    }\n    return board\n}\n\nconst getDirectionFromKey = key =>\n    key === 'ArrowUp' ? Direction.UP :\n        key === 'ArrowRight' ? Direction.RIGHT :\n            key === 'ArrowDown' ? Direction.DOWN :\n                key === 'ArrowLeft' ? Direction.LEFT : null;\n\nconst getOppositeDirection = direction =>\n    direction === Direction.UP ? Direction.DOWN :\n        direction === Direction.RIGHT ? Direction.LEFT :\n            direction === Direction.DOWN ? Direction.UP :\n                direction === Direction.LEFT ? Direction.RIGHT : null;\n\nconst getNextCoords = (coords, direction, board, hasBoundary) => {\n    const newCoords = direction === Direction.UP ? {\n        row: coords.row - 1,\n        col: coords.col\n    } : direction === Direction.RIGHT ? {\n        row: coords.row,\n        col: coords.col + 1\n    } : direction === Direction.DOWN ? {\n        row: coords.row + 1,\n        col: coords.col\n    } : direction === Direction.LEFT ? {\n        row: coords.row,\n        col: coords.col - 1\n    } : {\n        row: coords.row,\n        col: coords.col\n    };\n    return hasBoundary ? newCoords : {\n        row: newCoords.row < 0 ? board.length - 1 : newCoords.row >= board.length ? 0 : newCoords.row,\n        col: newCoords.col < 0 ? board[0].length - 1 : newCoords.col >= board[0].length ? 0 : newCoords.col\n    };\n};\n\nconst isOutOfBounds = (coords, board) => {\n    const { row, col } = coords;\n    return row < 0 || col < 0 || row >= board.length || col >= board[0].length\n};\n\nconst getCellClassName = (cellValue, foodCell, snakeCells) =>\n    snakeCells.has(cellValue) ? 'cell snake-cell' : cellValue === foodCell ? 'cell food-cell' : 'cell';\n\nexport default Board;","import { useEffect, useRef } from 'react';\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React, { useState, useEffect } from 'react';\n\nimport './Menu.css';\n\nconst Item = (props) => {\n    const [curIdx, setCurIdx] = useState(props.current ?? 0);\n\n    useEffect(() => {\n        const handleKeydown = e => {\n            if (props.isSelected && props.values) {\n                if (e.key === 'ArrowLeft') {\n                    if (curIdx === 0) return;\n                    props.action(curIdx - 1);\n                } else if (e.key === 'ArrowRight') {\n                    if (curIdx === props.values.length - 1) return;\n                    props.action(curIdx + 1);\n                }\n            }\n        };\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [curIdx, props]);\n\n    return (\n        props.values === undefined ?\n            <div className={`item ${props.isSelected ? 'selected-item' : ''}`}>\n                <span>{props.text}</span>\n            </div> :\n            <div className={`item value-item ${props.isSelected ? 'selected-item' : ''}`}>\n                <div className=\"value-item-cell\">\n                    <span>{props.text}</span>\n                </div>\n                <div className=\"value-item-cell\">\n                    <div className={props.isSelected && curIdx > 0 ? 'arrow-left' : ''}></div>\n                    <span className=\"value-item-value\">{props.values[curIdx].text}</span>\n                    <div className={props.isSelected && curIdx < props.values.length - 1 ? 'arrow-right' : ''}></div>\n                </div>\n            </div>\n    );\n};\n\nexport default Item;","import React, { useState, useEffect, useCallback } from 'react';\nimport Modal from '../Modal/Modal';\nimport Item from './Item';\n\nimport './Menu.css';\n\nconst MenuType = {\n    Main: 'MAIN',\n    Settings: 'SETTINGS'\n}\n\nconst Menu = (props) => {\n    const getMainItems = useCallback((isOpen) => [{\n        text: 'Start',\n        action: props.viewHandler\n    }, {\n        text: 'Settings',\n        action: () => {\n            setMenuType(MenuType.Settings);\n            setSelected(0);\n        }\n    }, {\n        text: 'Help',\n        action: () => setIsHelpOpen(!isOpen)\n    }], [props.viewHandler]);\n\n    const getSettingItems = useCallback(() => [...props.settingItems, {\n        text: 'Done',\n        action: () => {\n            setMenuType(MenuType.Main);\n            setSelected(1);\n        }\n    }], [props.settingItems]);\n\n    const [selected, setSelected] = useState(0);\n    const [isHelpOpen, setIsHelpOpen] = useState(false);\n    const [menuType, setMenuType] = useState(MenuType.Main);\n    const [mainItems, setMainItems] = useState(getMainItems(isHelpOpen));\n    const [settingItems,] = useState(getSettingItems());\n\n    useEffect(() => {\n        setMainItems(getMainItems(isHelpOpen));\n    }, [getMainItems, isHelpOpen]);\n\n    useEffect(() => {\n        const handleKeydown = e => {\n            const items = menuType === MenuType.Main ? mainItems : settingItems\n            if (e.key === 'Enter') {\n                items[selected].action();\n            } else if (!isHelpOpen) {\n                if (e.key === 'ArrowUp') {\n                    if (selected === 0) return;\n                    setSelected(s => s - 1);\n                } else if (e.key === 'ArrowDown') {\n                    if (selected === items.length - 1) return;\n                    setSelected(selected + 1);\n                }\n            }\n        };\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [selected, menuType, mainItems, settingItems, isHelpOpen]);\n\n    return (\n        <>\n            <div className='menu'>{\n                (menuType === MenuType.Main ? mainItems : settingItems).map((item, idx) => (\n                    <Item key={`${idx}_${props.currentSettingIdxs[idx]}`}\n                        text={item.text}\n                        values={item.values}\n                        current={props.currentSettingIdxs[idx]}\n                        action={item.action}\n                        isSelected={idx === selected}>\n                    </Item>))\n            }\n            </div>\n            <Modal isOpen={isHelpOpen}>\n                <div>\n                    <br></br>\n                    <h3>1. Use Arrow Keys to move.</h3>\n                    <h3>2. Press ENTER to Pause.</h3>\n                    <h3>3. Press ESC to End.</h3>\n                    <br></br>\n                </div>\n            </Modal>\n        </>\n    );\n};\n\nexport default Menu;","import React, { useState, useEffect } from 'react';\nimport Board from './Board/Board';\nimport Menu from './Menu/Menu';\nimport './App.css';\n\nconst MAX_SPEED = 20;\nconst DEFAULT_MAP_IDX = 0;\nconst DEFAULT_SPEED_IDX = 9;\nconst DEFAULT_BOARD_IDX = 1;\n\n\nconst View = {\n  InGame: 'INGAME',\n  Home: 'HOME'\n};\n\nconst Map = {\n  Standard: 'STANDARD',\n  NoWall: 'NOWALL'\n}\n\nclass Setting {\n  constructor(text, values, action) {\n    this.text = text;\n    this.values = values;\n    this.action = action;\n  }\n}\n\nconst App = () => {\n  const [view, setView] = useState(View.Home);\n  const [mapIdx, setMapIdx] = useState(DEFAULT_MAP_IDX)\n  const [speedIdx, setSpeedIdx] = useState(DEFAULT_SPEED_IDX);\n  const [boardSizeIdx, setBoardSizeIdx] = useState(DEFAULT_BOARD_IDX);\n  const [settingIdxs, setSettingIdx] = useState([mapIdx, speedIdx, boardSizeIdx]);\n  const [topScore, setTopScore] = useState(0);\n  const [mapSetting,] = useState(\n    new Setting(\n      'Map',\n      [{ text: 'Standard', value: Map.Standard }, { text: 'No Wall', value: Map.NoWall }],\n      i => setMapIdx(i))\n  );\n  const [speedSetting,] = useState(\n    new Setting(\n      'Speed',\n      [...Array(MAX_SPEED).keys()].map(n => ({ text: n + 1, value: n + 1 })),\n      i => setSpeedIdx(i))\n  );\n  const [boardSizeSetting,] = useState(\n    new Setting(\n      'Board Size',\n      [...Array(4).keys()].map(n => ({ text: `${(n + 2) * 5} x ${(n + 2) * 5}`, value: (n + 2) * 5 })),\n      i => setBoardSizeIdx(i))\n  );\n\n  useEffect(() => {\n    setSettingIdx([mapIdx, speedIdx, boardSizeIdx])\n  }, [mapIdx, speedIdx, boardSizeIdx]);\n\n  const handleView = () => {\n    if (view === View.InGame) {\n      setView(View.Home);\n    } else {\n      setView(View.InGame);\n    }\n  };\n\n  const handleTopScore = (s) => { setTopScore(s); };\n\n  return (\n    <div className=\"App\">{\n      view === View.Home ?\n        <Menu\n          viewHandler={handleView}\n          settingItems={[mapSetting, speedSetting, boardSizeSetting]}\n          currentSettingIdxs={settingIdxs}>\n        </Menu> :\n        <Board\n          hasWall={mapSetting.values[mapIdx].value === Map.Standard}\n          speed={speedSetting.values[speedIdx].value}\n          boardSize={boardSizeSetting.values[boardSizeIdx].value}\n          topScore={topScore}\n          topScoreHandler={handleTopScore}\n          viewHandler={handleView}>\n        </Board>\n    }\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}