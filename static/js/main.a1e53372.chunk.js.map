{"version":3,"sources":["Board/Snake.js","Modal/Modal.jsx","Board/Board.jsx","lib/utils.js","Menu/Item.jsx","Menu/Menu.jsx","App.jsx","index.js"],"names":["Snake","getHead","length","getTail","addHead","value","push","removeTail","shift","Array","Modal","props","isOpen","className","children","Direction","getSnakeStartValue","board","rowSize","colSize","startRow","Math","round","startCol","row","col","cell","Board","boardSize","counter","currentRow","createBoard","useState","snake","setSnake","Set","snakeCells","setSnakeCells","direction","setDirection","foodCell","setFoodCell","score","setScore","stop","setStop","max","speed","hasWall","hasBoundary","isPauseOpen","setIsPauseOpen","isEnd","setIsEnd","handleRestart","useCallback","newSnake","getNextCoords","dir","newCoords","isOutOfBounds","coords","getCellClassName","cellValue","has","useEffect","handleKeydown","e","key","viewHandler","newDirection","nextHeadCoords","window","addEventListener","removeEventListener","size","topScore","topScoreHandler","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","handleGameOver","nextHeadCell","newSnakeCells","add","delete","handleFoodConsumption","maxCellValue","nextFoodCell","floor","random","s","map","rowIdx","cellIdx","Item","curIdx","isSelected","values","action","undefined","text","MenuType","Menu","getMainItems","setMenuType","setSelected","setIsHelpOpen","getSettingItems","settingItems","selected","isHelpOpen","menuType","mainItems","setMainItems","items","item","idx","currentSettingIdxs","View","Map","Setting","this","App","view","setView","mapIdx","setMapIdx","speedIdx","setSpeedIdx","boardSizeIdx","setBoardSizeIdx","settingIdxs","setSettingIdx","setTopScore","i","mapSetting","keys","n","speedSetting","boardSizeSetting","handleView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a1e53372.chunk.js","sourcesContent":["class Snake extends Array {\n    getHead = () => this.length > 0 ? this[this.length - 1] : null;\n\n    getTail = () => this.length > 0 ? this[0] : null;\n\n    addHead = (value) => this.push(value);\n\n    removeTail = () => this.shift();\n}\n\nexport default Snake;","import React from 'react';\n\nimport './Modal.css';\n\nconst Modal = (props) => {\n\n    return (\n        props.isOpen &&\n        <div className='modal'>\n            <div className='modal-content'>\n                {props.children}\n            </div>\n        </div>\n    );\n};\n\nexport default Modal;","// Referenced from https://github.com/clementmihailescu/Snake-Game-Reverse-LL-Tutorial\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n    useInterval,\n} from '../lib/utils.js';\n\nimport './Board.css';\nimport Snake from './Snake';\nimport Modal from '../Modal/Modal';\n\nconst SNAKE_MIN_SPEED = 1000;\nconst INITIAL_FOOD_DISTANCE = 5\n\nconst PAUSE_KEY = 'Enter';\nconst END_KEY = 'Escape';\nconst UP_KEY = 'ArrowUp';\nconst RIGHT_KEY = 'ArrowRight';\nconst DOWN_KEY = 'ArrowDown';\nconst LEFT_KEY = 'ArrowLeft';\n\nconst Direction = {\n    UP: 'UP',\n    RIGHT: 'RIGHT',\n    DOWN: 'DOWN',\n    LEFT: 'LEFT',\n};\n\nconst getSnakeStartValue = board => {\n    const rowSize = board.length;\n    const colSize = board[0].length;\n    const startRow = Math.round(rowSize / 3);\n    const startCol = Math.round(colSize / 3);\n    const startCell = board[startRow][startCol];\n    return {\n        row: startRow,\n        col: startCol,\n        cell: startCell,\n    };\n};\n\nconst getDirectionFromKey = key =>\n    key === UP_KEY ? Direction.UP :\n        key === RIGHT_KEY ? Direction.RIGHT :\n            key === DOWN_KEY ? Direction.DOWN :\n                key === LEFT_KEY ? Direction.LEFT : null;\n\nconst createBoard = boardSize => {\n    let counter = 1;\n    const board = [];\n    for (let row = 0; row < boardSize; row++) {\n        const currentRow = [];\n        for (let col = 0; col < boardSize; col++) {\n            currentRow.push(counter++);\n        }\n        board.push(currentRow);\n    }\n    return board\n}\n\nconst Board = (props) => {\n    const board = createBoard(props.boardSize);\n    const [snake, setSnake] = useState(new Snake(getSnakeStartValue(board)));\n    const [snakeCells, setSnakeCells] = useState(new Set([snake.getHead().cell]));\n    const [direction, setDirection] = useState(Direction.RIGHT);\n    const [foodCell, setFoodCell] = useState(snake.getHead().cell + INITIAL_FOOD_DISTANCE);\n    const [score, setScore] = useState(0);\n    const [stop, setStop] = useState(false);\n    const [speed,] = useState(Math.max(SNAKE_MIN_SPEED - (props.speed - 1) * 50, 10));\n    const [hasBoundary,] = useState(props.hasWall);\n    const [isPauseOpen, setIsPauseOpen] = useState(false);\n    const [isEnd, setIsEnd] = useState(false);\n\n    const handleRestart = useCallback(() => {\n        const newSnake = getSnakeStartValue(board);\n        setSnake(new Snake(newSnake));\n        setSnakeCells(new Set([newSnake.cell]));\n        setDirection(Direction.RIGHT);\n        setFoodCell(newSnake.cell + INITIAL_FOOD_DISTANCE)\n        setScore(0);\n    }, [board]);\n\n    const getNextCoords = useCallback((dir) => {\n        const newCoords = dir === Direction.UP ? {\n            row: snake.getHead().row - 1,\n            col: snake.getHead().col\n        } : dir === Direction.RIGHT ? {\n            row: snake.getHead().row,\n            col: snake.getHead().col + 1\n        } : dir === Direction.DOWN ? {\n            row: snake.getHead().row + 1,\n            col: snake.getHead().col\n        } : dir === Direction.LEFT ? {\n            row: snake.getHead().row,\n            col: snake.getHead().col - 1\n        } : {\n            row: snake.getHead().row,\n            col: snake.getHead().col\n        };\n        return hasBoundary ? newCoords : {\n            row: newCoords.row < 0 ? board.length - 1 : newCoords.row >= board.length ? 0 : newCoords.row,\n            col: newCoords.col < 0 ? board[0].length - 1 : newCoords.col >= board[0].length ? 0 : newCoords.col\n        };\n    }, [snake, board, hasBoundary]);\n\n    const isOutOfBounds = useCallback((coords) => {\n        const { row, col } = coords;\n        return row < 0 || col < 0 || row >= board.length || col >= board[0].length\n    }, [board]);\n\n    const getCellClassName = useCallback((cellValue) =>\n        snakeCells.has(cellValue) ? 'cell snake-cell' :\n            cellValue === foodCell ? 'cell food-cell' :\n                'cell', [foodCell, snakeCells]);\n\n    // Handle keydown event.\n    useEffect(() => {\n        const handleKeydown = e => {\n            // Press Enter to pause or resume.\n            if (e.key === PAUSE_KEY) {\n                setStop(!stop);\n                if (isEnd) handleRestart();\n                setIsPauseOpen(!isPauseOpen);\n            } else if (e.key === END_KEY) {\n                props.viewHandler();\n            } else if (!stop) {\n                const newDirection = getDirectionFromKey(e.key);\n                // Ignore the cases\n                // 1. input key not arrow directions, or\n                // 2. the next cell is the same as the cell one after the haed \n                // when the snake's size is greater than one.\n                if (newDirection === null) return;\n\n                const nextHeadCoords = getNextCoords(newDirection);\n                if (!isOutOfBounds(nextHeadCoords) &&\n                    snake.length > 1 &&\n                    snake[snake.length - 2].cell === board[nextHeadCoords.row][nextHeadCoords.col]) {\n                    return;\n                }\n\n                setDirection(newDirection);\n            }\n        };\n\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [board, snake, stop, direction, snakeCells.size, isPauseOpen, isEnd,\n        handleRestart, getNextCoords, isOutOfBounds, props]);\n\n    // Handle scores\n    useEffect(() => {\n        if (score > props.topScore) props.topScoreHandler(score);\n    }, [score, props]);\n\n    // Handle snake's move.\n    useInterval(() => {\n        moveSnake();\n    }, !stop ? speed : null);\n\n    const moveSnake = () => {\n        const nextHeadCoords = getNextCoords(direction);\n\n        if (isOutOfBounds(nextHeadCoords) ||\n            snakeCells.has(board[nextHeadCoords.row][nextHeadCoords.col])) {\n            handleGameOver();\n            return;\n        }\n        const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n        const newSnake = new Snake(...snake);\n\n        newSnake.addHead({\n            row: nextHeadCoords.row,\n            col: nextHeadCoords.col,\n            cell: nextHeadCell\n        });\n\n        const newSnakeCells = new Set(snakeCells);\n        newSnakeCells.add(nextHeadCell);\n\n        if (nextHeadCell !== foodCell) {\n            newSnakeCells.delete(snake.getTail().cell);\n            newSnake.removeTail();\n        } else {\n            handleFoodConsumption(newSnakeCells);\n        }\n\n        setSnake(newSnake);\n        setSnakeCells(newSnakeCells);\n    };\n\n    const handleFoodConsumption = newSnakeCells => {\n        const maxCellValue = props.boardSize ** 2;\n        let nextFoodCell = null;\n        while (nextFoodCell === null || newSnakeCells.has(nextFoodCell)) {\n            nextFoodCell = Math.floor(Math.random() * maxCellValue + 1);\n        }\n        setFoodCell(nextFoodCell);\n        setScore(s => s + 1);\n    };\n\n    const handleGameOver = () => {\n        setStop(true);\n        setIsEnd(true);\n        setIsPauseOpen(true);\n    }\n\n    return (\n        <>\n            <div className=\"board\">{\n                board.map((row, rowIdx) => (\n                    <div key={rowIdx} className=\"row\">{\n                        row.map((cellValue, cellIdx) => (\n                            <div\n                                key={cellIdx}\n                                className={getCellClassName(cellValue)}>\n                            </div>\n                        ))\n                    }</div>\n                ))\n            }\n                <div className=\"score-row\">\n                    <div className=\"score-cell\">\n                        <span>Score: {score}</span>\n                    </div>\n                    <div className=\"score-cell\">\n                        <span>Top Score: {props.topScore}</span>\n                    </div>\n                </div>\n            </div>\n            <Modal isOpen={isPauseOpen}>\n                <div>\n                    <br></br>\n                    {isEnd && <h3>Your score: {score}</h3>}\n                    <h3>Press ENTER to {isEnd ? 'Restart' : 'Resume'}.</h3>\n                    <h3>Press ESC to End.</h3>\n                    <br></br>\n                </div>\n            </Modal>\n        </>\n    );\n};\n\nexport default Board;","import { useEffect, useRef } from 'react';\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React, { useState, useEffect } from 'react';\n\nimport './Menu.css';\n\nconst RIGHT_KEY = 'ArrowRight';\nconst LEFT_KEY = 'ArrowLeft';\n\nconst Item = (props) => {\n    const [curIdx,] = useState(props.current ?? 0);\n\n    useEffect(() => {\n        const handleKeydown = e => {\n            if (props.isSelected && props.values) {\n                if (e.key === LEFT_KEY) {\n                    if (curIdx === 0) return;\n                    props.action(curIdx - 1);\n                } else if (e.key === RIGHT_KEY) {\n                    if (curIdx === props.values.length - 1) return;\n                    props.action(curIdx + 1);\n                }\n            }\n        };\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [curIdx, props]);\n\n    return (\n        props.values === undefined ?\n            <div className={`item ${props.isSelected ? 'selected-item' : ''}`}>\n                <span>{props.text}</span>\n            </div> :\n            <div className={`item value-item ${props.isSelected ? 'selected-item' : ''}`}>\n                <div className=\"value-item-cell\">\n                    <span>{props.text}</span>\n                </div>\n                <div className=\"value-item-cell\">\n                    <div className={props.isSelected && curIdx > 0 ? 'arrow-left' : ''}></div>\n                    <span className=\"value-item-value\">{props.values[curIdx].text}</span>\n                    <div className={props.isSelected && curIdx < props.values.length - 1 ? 'arrow-right' : ''}></div>\n                </div>\n            </div>\n    );\n};\n\nexport default Item;","import React, { useState, useEffect, useCallback } from 'react';\nimport Modal from '../Modal/Modal';\nimport Item from './Item';\n\nimport './Menu.css';\n\nconst CONFIRM_KEY = 'Enter';\nconst UP_KEY = 'ArrowUp';\nconst DOWN_KEY = 'ArrowDown';\n\nconst MenuType = {\n    Main: 'MAIN',\n    Settings: 'SETTINGS'\n}\n\nconst Menu = (props) => {\n    const getMainItems = useCallback((isOpen) => [{\n        text: 'Start',\n        action: props.viewHandler\n    }, {\n        text: 'Settings',\n        action: () => {\n            setMenuType(MenuType.Settings);\n            setSelected(0);\n        }\n    }, {\n        text: 'Help',\n        action: () => setIsHelpOpen(!isOpen)\n    }], [props.viewHandler]);\n\n    const getSettingItems = useCallback(() => [...props.settingItems, {\n        text: 'Done',\n        action: () => {\n            setMenuType(MenuType.Main);\n            setSelected(1);\n        }\n    }], [props.settingItems]);\n\n    const [selected, setSelected] = useState(0);\n    const [isHelpOpen, setIsHelpOpen] = useState(false);\n    const [menuType, setMenuType] = useState(MenuType.Main);\n    const [mainItems, setMainItems] = useState(getMainItems(isHelpOpen));\n    const [settingItems,] = useState(getSettingItems());\n\n    useEffect(() => {\n        setMainItems(getMainItems(isHelpOpen));\n    }, [getMainItems, isHelpOpen]);\n\n    useEffect(() => {\n        const handleKeydown = e => {\n            const items = menuType === MenuType.Main ? mainItems : settingItems\n            if (e.key === CONFIRM_KEY) {\n                items[selected].action();\n            } else if (!isHelpOpen) {\n                if (e.key === UP_KEY) {\n                    if (selected === 0) return;\n                    setSelected(s => s - 1);\n                } else if (e.key === DOWN_KEY) {\n                    if (selected === items.length - 1) return;\n                    setSelected(selected + 1);\n                }\n            }\n        };\n\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [selected, menuType, mainItems, settingItems, isHelpOpen]);\n\n    return (\n        <>\n            <div className='menu'>{\n                (menuType === MenuType.Main ? mainItems : settingItems).map((item, idx) => (\n                    <Item key={`${idx}_${props.currentSettingIdxs[idx]}`}\n                        text={item.text}\n                        values={item.values}\n                        current={props.currentSettingIdxs[idx]}\n                        action={item.action}\n                        isSelected={idx === selected}>\n                    </Item>))\n            }\n            </div>\n            <Modal isOpen={isHelpOpen}>\n                <div>\n                    <br></br>\n                    <h3>1. Use Arrow Keys to Move.</h3>\n                    <h3>2. Press ENTER to Pause.</h3>\n                    <h3>3. Press ESC to End.</h3>\n                    <br></br>\n                </div>\n            </Modal>\n        </>\n    );\n};\n\nexport default Menu;","import React, { useState, useEffect } from 'react';\nimport Board from './Board/Board';\nimport Menu from './Menu/Menu';\nimport './App.css';\n\nconst MAX_SPEED = 21;\nconst DEFAULT_MAP_IDX = 0;\nconst DEFAULT_SPEED_IDX = 9;\nconst DEFAULT_BOARD_IDX = 1;\n\n\nconst View = {\n  InGame: 'INGAME',\n  Home: 'HOME'\n};\n\nconst Map = {\n  Standard: 'STANDARD',\n  NoWall: 'NOWALL'\n}\n\nclass Setting {\n  constructor(text, values, action) {\n    this.text = text;\n    this.values = values;\n    this.action = action;\n  }\n}\n\nconst App = () => {\n  const [view, setView] = useState(View.Home);\n  const [mapIdx, setMapIdx] = useState(DEFAULT_MAP_IDX)\n  const [speedIdx, setSpeedIdx] = useState(DEFAULT_SPEED_IDX);\n  const [boardSizeIdx, setBoardSizeIdx] = useState(DEFAULT_BOARD_IDX);\n  const [settingIdxs, setSettingIdx] = useState([mapIdx, speedIdx, boardSizeIdx]);\n  const [topScore, setTopScore] = useState(0);\n  const [mapSetting,] = useState(\n    new Setting(\n      'Map',\n      [{ text: 'Standard', value: Map.Standard }, { text: 'No Wall', value: Map.NoWall }],\n      i => setMapIdx(i))\n  );\n  const [speedSetting,] = useState(\n    new Setting(\n      'Speed',\n      [...Array(MAX_SPEED).keys()].map(n => ({ text: n + 1, value: n + 1 })),\n      i => setSpeedIdx(i))\n  );\n  const [boardSizeSetting,] = useState(\n    new Setting(\n      'Board Size',\n      [...Array(4).keys()].map(n => ({ text: `${(n + 2) * 5} x ${(n + 2) * 5}`, value: (n + 2) * 5 })),\n      i => setBoardSizeIdx(i))\n  );\n\n  useEffect(() => {\n    setSettingIdx([mapIdx, speedIdx, boardSizeIdx])\n  }, [mapIdx, speedIdx, boardSizeIdx]);\n\n  const handleView = () => {\n    if (view === View.InGame) {\n      setView(View.Home);\n    } else {\n      setView(View.InGame);\n    }\n  };\n\n  const handleTopScore = (s) => { setTopScore(s); };\n\n  return (\n    <div className='App'>{\n      view === View.Home ?\n        <Menu\n          viewHandler={handleView}\n          settingItems={[mapSetting, speedSetting, boardSizeSetting]}\n          currentSettingIdxs={settingIdxs}>\n        </Menu> :\n        <Board\n          hasWall={mapSetting.values[mapIdx].value === Map.Standard}\n          speed={speedSetting.values[speedIdx].value}\n          boardSize={boardSizeSetting.values[boardSizeIdx].value}\n          topScore={topScore}\n          topScoreHandler={handleTopScore}\n          viewHandler={handleView}>\n        </Board>\n    }\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}