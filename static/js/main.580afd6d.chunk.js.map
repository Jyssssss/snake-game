{"version":3,"sources":["lib/LinkedListNode.js","Board/Snake.js","lib/LinkedList.js","Board/Board.jsx","lib/utils.js","Menu/Item.jsx","Menu/Menu.jsx","App.jsx","index.js"],"names":["LinkedListNode","value","this","next","Snake","getHead","tail","getTail","head","addHead","addLast","removeTail","removeFirst","addFirst","node","curHead","curTail","removeLast","Direction","getSnakeStartValue","board","rowSize","length","colSize","startRow","Math","round","startCol","row","col","cell","createBoard","boardSize","counter","currentRow","push","getDirectionFromKey","key","getOppositeDirection","direction","getNextCoords","coords","hasBoundary","newCoords","isOutOfBounds","getCellClassName","cellValue","foodCell","snakeCells","has","Board","props","useState","snake","setSnake","Set","setSnakeCells","setDirection","setFoodCell","score","setScore","stop","setStop","max","speed","hasWall","useEffect","handleKeydown","e","viewHandler","newDirection","size","window","addEventListener","removeEventListener","topScore","topScoreHandler","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","moveSnake","curHeadCoords","nextHeadCoords","handleGameOver","nextHeadCell","newSnakeCells","add","delete","handleFoodConsumption","maxCellValue","nextFoodCell","floor","random","s","newSnake","className","map","rowIdx","cellIdx","Item","curIdx","isSelected","values","action","undefined","text","Menu","menuItems","setItems","settingItems","setSelected","alert","selected","items","item","idx","currentSettingIdxs","View","Map","Setting","App","view","setView","mapIdx","setMapIdx","speedIdx","setSpeedIdx","boardSizeIdx","setBoardSizeIdx","settingIdxs","setSettingIdx","setTopScore","i","mapSetting","Array","keys","n","speedSetting","boardSizeSetting","handleView","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.580afd6d.chunk.js","sourcesContent":["class LinkedListNode {\n    constructor(value) {\n        this.value = value;\n        this.next = null;\n    }\n}\n\nexport default LinkedListNode;","import LinkedList from \"../lib/LinkedList\";\n\nclass Snake extends LinkedList {\n    getHead = () => this.tail;\n\n    getTail = () => this.head;\n\n    addHead = (value) => this.addLast(value);\n\n    removeTail = () => this.removeFirst();\n}\n\nexport default Snake;","import LinkedListNode from './LinkedListNode'\n\nclass LinkedList {\n    constructor(value) {\n        const node = new LinkedListNode(value);\n        this.head = node;\n        this.tail = node;\n    }\n\n    addFirst = (value) => {\n        const node = new LinkedListNode(value);\n        const curHead = this.head;\n        this.head = node;\n        node.next = curHead;\n        if (this.tail === null) {\n            this.tail = node;\n        }\n    };\n\n    addLast = (value) => {\n        if (this.head === null) {\n            this.addFirst(value);\n        } else {\n            const node = new LinkedListNode(value);\n            const curTail = this.tail;\n            this.tail = node;\n            curTail.next = node;\n        }\n    };\n\n    removeFirst = () => {\n        if (this.head !== null) {\n            this.head = this.head.next;\n            if (this.head === null) {\n                this.tail = null;\n            }\n        }\n    }\n\n    removeLast = () => {\n        if (this.head !== null) {\n            let node = this.head;\n            if (node.next == null) {\n                this.head = null;\n                this.tail = null;\n            }\n            else {\n                while (node.next !== null && node.next.next !== null) {\n                    node = node.next;\n                }\n                node.next = null;\n                this.tail = node;\n            }\n        }\n    };\n}\n\nexport default LinkedList;","import React, { useState, useEffect } from 'react';\nimport {\n    useInterval,\n} from '../lib/utils.js';\n\nimport './Board.css';\nimport Snake from './Snake';\n\nconst SNAKE_MIN_SPEED = 1000;\nconst INITIAL_FOOD_DISTANCE = 5\n\nconst Direction = {\n    UP: 'UP',\n    RIGHT: 'RIGHT',\n    DOWN: 'DOWN',\n    LEFT: 'LEFT',\n};\n\n\nconst getSnakeStartValue = board => {\n    const rowSize = board.length;\n    const colSize = board[0].length;\n    const startRow = Math.round(rowSize / 3);\n    const startCol = Math.round(colSize / 3);\n    const startCell = board[startRow][startCol];\n    return {\n        row: startRow,\n        col: startCol,\n        cell: startCell,\n    };\n};\n\nconst Board = (props) => {\n    const board = createBoard(props.boardSize);\n    const [snake, setSnake] = useState(new Snake(getSnakeStartValue(board)));\n    const [snakeCells, setSnakeCells] = useState(new Set([snake.getHead().value.cell]));\n    const [direction, setDirection] = useState(Direction.RIGHT);\n    const [foodCell, setFoodCell] = useState(snake.getHead().value.cell + INITIAL_FOOD_DISTANCE);\n    const [score, setScore] = useState(0);\n    const [stop, setStop] = useState(false);\n    const [speed, setSpeed] = useState(Math.max(SNAKE_MIN_SPEED - (props.speed - 1) * 50, 10));\n    const [hasBoundary, setHasBoundary] = useState(props.hasWall);\n\n    // Handle keydown event.\n    useEffect(() => {\n        const handleKeydown = e => {\n            // Press Enter to pause or resume.\n            if (e.key === 'Enter') {\n                setStop(!stop);\n            } else if (e.key === 'Escape') {\n                props.viewHandler();\n            } else if (!stop) {\n                const newDirection = getDirectionFromKey(e.key);\n                // Ignore the cases\n                // 1. input key not arrow directions,\n                // 2. or new direction is the opposite of the original one \n                // when the snake's size is more than one.\n                if (newDirection === null ||\n                    (getOppositeDirection(newDirection) === direction && snakeCells.size > 1))\n                    return;\n                setDirection(newDirection);\n            }\n        };\n\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [stop, direction, snakeCells.size, props]);\n\n    // Handle scores\n    useEffect(() => {\n        if (score > props.topScore) props.topScoreHandler(score);\n    }, [score, props]);\n\n    // Handle snake's move.\n    useInterval(() => {\n        moveSnake();\n    }, !stop ? speed : null);\n\n    const moveSnake = () => {\n        const curHeadCoords = {\n            row: snake.getHead().value.row,\n            col: snake.getHead().value.col\n        };\n\n        const nextHeadCoords = getNextCoords(curHeadCoords, direction, board, hasBoundary);\n\n        if ((hasBoundary && isOutOfBounds(nextHeadCoords, board)) ||\n            snakeCells.has(board[nextHeadCoords.row][nextHeadCoords.col])) {\n            handleGameOver();\n            return;\n        }\n        const nextHeadCell = board[nextHeadCoords.row][nextHeadCoords.col];\n\n        snake.addHead({\n            row: nextHeadCoords.row,\n            col: nextHeadCoords.col,\n            cell: nextHeadCell\n        });\n\n        const newSnakeCells = new Set(snakeCells);\n        newSnakeCells.add(nextHeadCell);\n\n        if (nextHeadCell !== foodCell) {\n            newSnakeCells.delete(snake.getTail().value.cell);\n            snake.removeTail();\n        } else {\n            handleFoodConsumption(newSnakeCells);\n        }\n\n        setSnake(snake);\n        setSnakeCells(newSnakeCells);\n    }\n\n    const handleFoodConsumption = newSnakeCells => {\n        const maxCellValue = props.boardSize ** 2;\n        let nextFoodCell = null;\n        while (nextFoodCell === null || newSnakeCells.has(nextFoodCell)) {\n            nextFoodCell = Math.floor(Math.random() * maxCellValue + 1);\n        }\n        setFoodCell(nextFoodCell);\n        setScore(s => s + 1);\n    }\n\n    const handleGameOver = () => {\n        const newSnake = getSnakeStartValue(board);\n        setSnake(new Snake(newSnake));\n        setSnakeCells(new Set([newSnake.cell]));\n        setDirection(Direction.RIGHT);\n        setFoodCell(newSnake.cell + INITIAL_FOOD_DISTANCE)\n        setScore(0);\n    }\n\n    return (\n        <div className=\"board\">{\n            board.map((row, rowIdx) => (\n                <div key={rowIdx} className=\"row\">{\n                    row.map((cellValue, cellIdx) => (\n                        <div\n                            key={cellIdx}\n                            className={getCellClassName(cellValue, foodCell, snakeCells)}>\n                        </div>\n                    ))\n                }</div>\n            ))\n        }\n            <div className=\"score-row\">\n                <div className=\"score-cell\">\n                    <span>Score: {score}</span>\n                </div>\n                <div className=\"score-cell\">\n                    <span>Top Score: {props.topScore}</span>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst createBoard = boardSize => {\n    let counter = 1;\n    const board = [];\n    for (let row = 0; row < boardSize; row++) {\n        const currentRow = [];\n        for (let col = 0; col < boardSize; col++) {\n            currentRow.push(counter++);\n        }\n        board.push(currentRow);\n    }\n    return board\n}\n\nconst getDirectionFromKey = key =>\n    key === 'ArrowUp' ? Direction.UP :\n        key === 'ArrowRight' ? Direction.RIGHT :\n            key === 'ArrowDown' ? Direction.DOWN :\n                key === 'ArrowLeft' ? Direction.LEFT : null;\n\nconst getOppositeDirection = direction =>\n    direction === Direction.UP ? Direction.DOWN :\n        direction === Direction.RIGHT ? Direction.LEFT :\n            direction === Direction.DOWN ? Direction.UP :\n                direction === Direction.LEFT ? Direction.RIGHT : null;\n\nconst getNextCoords = (coords, direction, board, hasBoundary) => {\n    const newCoords = direction === Direction.UP ? {\n        row: coords.row - 1,\n        col: coords.col\n    } : direction === Direction.RIGHT ? {\n        row: coords.row,\n        col: coords.col + 1\n    } : direction === Direction.DOWN ? {\n        row: coords.row + 1,\n        col: coords.col\n    } : direction === Direction.LEFT ? {\n        row: coords.row,\n        col: coords.col - 1\n    } : {\n        row: coords.row,\n        col: coords.col\n    };\n    return hasBoundary ? newCoords : {\n        row: newCoords.row < 0 ? board.length - 1 : newCoords.row >= board.length ? 0 : newCoords.row,\n        col: newCoords.col < 0 ? board[0].length - 1 : newCoords.col >= board[0].length ? 0 : newCoords.col\n    };\n};\n\nconst isOutOfBounds = (coords, board) => {\n    const { row, col } = coords;\n    return row < 0 || col < 0 || row >= board.length || col >= board[0].length\n};\n\nconst getCellClassName = (cellValue, foodCell, snakeCells) =>\n    snakeCells.has(cellValue) ? 'cell snake-cell' : cellValue === foodCell ? 'cell food-cell' : 'cell';\n\nexport default Board;","import { useEffect, useRef } from 'react';\n\n// Copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            let id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n    }, [delay]);\n}","import React, { useState, useEffect } from 'react';\n\nimport './Menu.css';\n\nconst Item = (props) => {\n    const [curIdx, setCurIdx] = useState(props.current ?? 0);\n\n    useEffect(() => {\n        const handleKeydown = e => {\n            if (props.isSelected && props.values) {\n                if (e.key === 'ArrowLeft') {\n                    if (curIdx === 0) return;\n                    props.action(curIdx - 1);\n                } else if (e.key === 'ArrowRight') {\n                    if (curIdx === props.values.length - 1) return;\n                    props.action(curIdx + 1);\n                }\n            }\n        };\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [curIdx, props]);\n\n    return (\n        props.values === undefined ?\n            <div className={`item ${props.isSelected ? 'selected-item' : ''}`}>\n                <span>{props.text}</span>\n            </div> :\n            <div className={`item value-item ${props.isSelected ? 'selected-item' : ''}`}>\n                <div className=\"value-item-cell\">\n                    <span>{props.text}</span>\n                </div>\n                <div className=\"value-item-cell\">\n                    <div className={props.isSelected && curIdx > 0 ? 'arrow-left' : ''}></div>\n                    <span className=\"value-item-value\">{props.values[curIdx].text}</span>\n                    <div className={props.isSelected && curIdx < props.values.length - 1 ? 'arrow-right' : ''}></div>\n                </div>\n            </div>\n    );\n};\n\nexport default Item;","import React, { useState, useEffect } from 'react';\nimport Item from './Item';\n\nimport './Menu.css';\n\nconst Menu = (props) => {\n    const menuItems = [{\n        text: 'Start',\n        action: props.viewHandler\n    }, {\n        text: 'Settings',\n        action: () => {\n            setItems(settingItems);\n            setSelected(0);\n        }\n    }, {\n        text: 'Help',\n        action: () => { alert('1. Use Arrow Keys to move. \\n2. Press ENTER to Pause. \\n3. Press ESC to End. ') }\n    }];\n\n    const settingItems = [...props.settingItems, {\n        text: 'Done',\n        action: () => {\n            setItems(menuItems);\n            setSelected(1);\n        }\n    }];\n\n    const [selected, setSelected] = useState(0);\n    const [items, setItems] = useState(menuItems);\n\n    useEffect(() => {\n        const handleKeydown = e => {\n            if (e.key === 'Enter') {\n                items[selected].action();\n            } else {\n                if (e.key === 'ArrowUp') {\n                    if (selected === 0) return;\n                    setSelected(s => s - 1);\n                } else if (e.key === 'ArrowDown') {\n                    if (selected === items.length - 1) return;\n                    setSelected(selected + 1);\n                }\n            }\n        };\n        window.addEventListener('keydown', handleKeydown);\n        return () => window.removeEventListener('keydown', handleKeydown);\n    }, [items, selected]);\n\n    return (\n        <div className='menu'>{\n            items.map((item, idx) => (\n                <Item key={`${idx} ${props.currentSettingIdxs[idx]}`}\n                    text={item.text}\n                    values={item.values}\n                    current={props.currentSettingIdxs[idx]}\n                    action={item.action}\n                    isSelected={idx === selected}>\n                </Item>))\n        }\n        </div>\n    );\n};\n\nexport default Menu;","import React, { useState, useEffect } from 'react';\nimport Board from './Board/Board';\nimport Menu from './Menu/Menu';\nimport './App.css';\n\nconst MAX_SPEED = 20;\nconst DEFAULT_MAP_IDX = 0;\nconst DEFAULT_SPEED_IDX = 9;\nconst DEFAULT_BOARD_IDX = 1;\n\n\nconst View = {\n  InGame: 'INGAME',\n  Home: 'HOME'\n};\n\nconst Map = {\n  Standard: 'STANDARD',\n  NoWall: 'NOWALL'\n}\n\nclass Setting {\n  constructor(text, values, action) {\n    this.text = text;\n    this.values = values;\n    this.action = action;\n  }\n}\n\nconst App = () => {\n  const [view, setView] = useState(View.Home);\n  const [mapIdx, setMapIdx] = useState(DEFAULT_MAP_IDX)\n  const [speedIdx, setSpeedIdx] = useState(DEFAULT_SPEED_IDX);\n  const [boardSizeIdx, setBoardSizeIdx] = useState(DEFAULT_BOARD_IDX);\n  const [settingIdxs, setSettingIdx] = useState([mapIdx, speedIdx, boardSizeIdx]);\n  const [topScore, setTopScore] = useState(0);\n  const [mapSetting, setMapSetting] = useState(\n    new Setting(\n      'Map',\n      [{ text: 'Standard', value: Map.Standard }, { text: 'No Wall', value: Map.NoWall }],\n      i => setMapIdx(i))\n  );\n  const [speedSetting, setSpeedSetting] = useState(\n    new Setting(\n      'Speed',\n      [...Array(MAX_SPEED).keys()].map(n => ({ text: n + 1, value: n + 1 })),\n      i => setSpeedIdx(i))\n  );\n  const [boardSizeSetting, setBoardSizeSetting] = useState(\n    new Setting(\n      'Board Size',\n      [...Array(4).keys()].map(n => ({ text: `${(n + 2) * 5} x ${(n + 2) * 5}`, value: (n + 2) * 5 })),\n      i => setBoardSizeIdx(i))\n  );\n\n  useEffect(() => {\n    setSettingIdx([mapIdx, speedIdx, boardSizeIdx])\n  }, [mapIdx, speedIdx, boardSizeIdx]);\n\n  const handleView = () => {\n    if (view === View.InGame) {\n      setView(View.Home);\n    } else {\n      setView(View.InGame);\n    }\n  };\n\n  const handleTopScore = (s) => { setTopScore(s); };\n\n  return (\n    <div className=\"App\">{\n      view === View.Home ?\n        <Menu\n          viewHandler={handleView}\n          settingItems={[mapSetting, speedSetting, boardSizeSetting]}\n          currentSettingIdxs={settingIdxs}>\n        </Menu> :\n        <Board\n          hasWall={mapSetting.values[mapIdx].value === Map.Standard}\n          speed={speedSetting.values[speedIdx].value}\n          boardSize={boardSizeSetting.values[boardSizeIdx].value}\n          topScore={topScore}\n          topScoreHandler={handleTopScore}\n          viewHandler={handleView}>\n        </Board>\n    }\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}